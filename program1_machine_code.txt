000000000 // r0 = 0
100100001 // r1 = i = 0
000011110 // LOOP: r0 = 30
101011001 // i < 30 then 1 else 0
111000000 // brl DONE
100010001 // r0 = mem[i]
100100010 // r2 = low = mem[i]
000000001 // r0 = 1
100000001 // r0 = i + 1
100010000 // r0 = mem[i+1]
100100011 // r3 = upp = mem[i+1]
000000101 // r0 = 5
101001011 // r0 = upp << 5
100100011 // upp = upp << 5
000000011 // r0 = 3
101010010 // r0 = low >> 3
100100100 // r4 = t_low = low >> 3
100110011 // r0 = t_low | upp
100100011 // upp = t_low | upp
011111110 // r0 = ‘b1111_1110
100101011 // r0 = upp & ‘b1111_1110
100100011 // upp = upp & ‘b1111_1110
000000001 // r0 = 1
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = p = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111101 // r0 = p ^ upp[6]
100100101 // p = p ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp[5] >> 5
100101110 // r0 = upp[5]
100111101 // r0 = p ^ upp[5]
100100101 // p = p ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111101 // r0 = p ^ upp[4]
100100101 // p = p ^ upp[4]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111101 // r0 = p ^ upp[3]
100100101 // p = p ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111101 // r0 = p ^ upp[2]
100100101 // p = p ^ upp[2]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111101 // r0 = p ^ upp[1]
100100101 // p = p ^ upp[1]
000011111 // r0 = 31
100000001 // r0 = i + 31
100100110 // r6 = i + 31
000000000 // r0 = 0
100000011 // r0 = upp
100110101 // r0 = upp | p
100100011 // upp = upp | p
100011110 // mem[i+31] = upp
000000100 // r0 = 4
101001010 // r0 = low << 4
100100100 // t_low = low << 4
011100000 // r0 = ‘b1110_0000
100101100 // r0 = t_low & ‘b1110_0000
100100100 // t_low = t_low & ‘b1110_0000
000000001 // r0 = 1
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = p = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111101 // r0 = p ^ upp[6]
100100101 // p = p ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp >> 5
100101110 // r0 = upp[5]
100111101 // r0 = p ^ upp[5]
100100101 // p = p ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111101 // r0 = p ^ upp[4]
100100101 // p = p ^ upp[4]
000000111 // r0 = 7
101010100 // r0 = t_low >> 7
100101110 // r0 = t_low[7]
100111101 // r0 = p ^ t_low[7]
100100101 // p = p ^ t_low[7]
000000110 // r0 = 6
101010100 // r0 = t_low >> 6
100101110 // r0 = t_low[6]
100111101 // r0 = p ^ t_low[6]
100100101 // p = p ^ t_low[6]
000000101 // r0 = 5
101010100 // r0 = t_low >> 5
100101110 // r0 = t_low[5]
100111101 // r0 = p ^ t_low[5]
100100101 // p = p ^ t_low[5]
000000100 // r0 = 4
101001101 // r0 = p << 4
100110100 // r0 = (p << 4) | t_low
100100100 // t_low = (p << 4) | t_low
000000001 // r0 = ‘b0000_0001
100101010 // r0 = low[0]
100100101 // p = low[0]
000000011 // r0 = 3
101001101 // r0 = low[0] << 3
100110100 // r0 = (low[0] << 3) | t_low
100100100 // t_low = (low[0] << 3) | t_low
000000001 // r0 = 1
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = p = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111101 // r0 = p ^ upp[6]
100100101 // p = p ^ upp[6]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111101 // r0 = p ^ upp[3]
100100101 // p = p ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111101 // r0 = p ^ upp[2]
100100101 // p = p ^ upp[2]
000000011 // r0 = 3
101010010 // r0 = low >> 3
100101110 // r0 = low[3]
100111101 // r0 = p ^ low[3]
100100101 // p = p ^ low[3]
000000010 // r0 = 2
101010010 // r0 = low >> 2
100101110 // r0 = low[2]
100111101 // r0 = p ^ low[2]
100100101 // p = p ^ low[2]
000000000 // r0 = 0
100000010 // r0 = low
100101110 // r0 = low[0]
100111101 // r0 = p ^ low[0]
100100101 // p = p ^ low[0]
000000010 // r0 = 2
101001101 // r0 = p << 2
100110100 // r0 = (p << 2) | t_low
100100100 // t_low = (p << 2) | t_low
000000001 // r0 = 1
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = p = upp[7]
000000101 // r0 = 5
101010011 // r0 = upp[5] >> 5
100101110 // r0 = upp[5]
100111101 // r0 = p ^ upp[5]
100100101 // p = p ^ upp[5]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111101 // r0 = p ^ upp[3]
100100101 // p = p ^ upp[3]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111101 // r0 = p ^ upp[1]
100100101 // p = p ^ upp[1]
000000011 // r0 = 3
101010010 // r0 = low >> 3
100101110 // r0 = low[3]
100111101 // r0 = p ^ low[3]
100100101 // p = p ^ low[3]
000000001 // r0 = 1
101010010 // r0 = low >> 1
100101110 // r0 = low[1]
100111101 // r0 = p ^ low[1]
100100101 // p = p ^ low[1]
000000000 // r0 = 0
100000010 // r0 = low
100101110 // r0 = low[0]
100111101 // r0 = p ^ low[0]
100100101 // p = p ^ low[0]
000000001 // r0 = 1
101001101 // r0 = p << 1
100110100 // r0 = (p << 1) | t_low
100100100 // t_low = (p << 1) | t_low
000000001 // r0 = 1
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = p = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111101 // r0 = p ^ upp[6]
100100101 // p = p ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp[5] >> 5
100101110 // r0 = upp[5]
100111101 // r0 = p ^ upp[5]
100100101 // p = p ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111101 // r0 = p ^ upp[4]
100100101 // p = p ^ upp[4]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111101 // r0 = p ^ upp[3]
100100101 // p = p ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111101 // r0 = p ^ upp[2]
100100101 // p = p ^ upp[2]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111101 // r0 = p ^ upp[1]
100100101 // p = p ^ upp[1]
000000000 // r0 = 0
100000011 // r0 = upp
100101110 // r0 = upp[0]
100111101 // r0 = p ^ upp[0]
100100101 // p = p ^ upp[0]
000000111 // r0 = 7
101010100 // r0 = t_low >> 7
100101110 // r0 = t_low[7]
100111101 // r0 = p ^ t_low[7]
100100101 // p = p ^ t_low[7]
000000110 // r0 = 6
101010100 // r0 = t_low >> 6
100101110 // r0 = t_low[6]
100111101 // r0 = p ^ t_low[6]
100100101 // p = p ^ t_low[6]
000000101 // r0 = 5
101010100 // r0 = t_low[5] >> 5
100101110 // r0 = t_low[5]
100111101 // r0 = p ^ t_low[5]
100100101 // p = p ^ t_low[5]
000000100 // r0 = 4
101010100 // r0 = t_low >> 4
100101110 // r0 = t_low[4]
100111101 // r0 = p ^ t_low[4]
100100101 // p = p ^ t_low[4]
000000011 // r0 = 3
101010100 // r0 = t_low >> 3
100101110 // r0 = t_low[3]
100111101 // r0 = p ^ t_low[3]
100100101 // p = p ^ t_low[3]
000000010 // r0 = 2
101010100 // r0 = t_low >> 2
100101110 // r0 = t_low[2]
100111101 // r0 = p ^ t_low[2]
100100101 // p = p ^ t_low[2]
000000001 // r0 = 1
101010100 // r0 = t_low >> 1
100101110 // r0 = t_low[1]
100111101 // r0 = p ^ t_low[1]
100100101 // p = p ^ t_low[1]
000011110 // r0 = 30
100000001 // r0 = i + 30
100100110 // r6 = i + 30
000000000 // r0 = 0
100000101 // r0 = p
100110100 // r0 = p | t_low
100100100 // t_low = p | t_low
100011110 // mem[i+30] = t_low
000000010 // r0 = 2
100000001 // r0 = i + 2
100100001 // i = i + 2
101011000 // $0 < $0 then 1 else 0
111000001 // brl LOOP
101111111 // DONE:
