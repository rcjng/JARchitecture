000011110 // r0 = 30
100100001 // r1 = i = 30
000111100 // LOOP: r0 = 60
101011001 // check i < 60. if true, continue computation…
111010000 // brl DONE
100010001 // r0 = mem[i]
100100010 // r2 = low = mem[i]
000000001 // r0 = 1
100000001 // r0 = i + 1
100010000 // r0 = mem[i+1]
100100011 // r3 = upp = mem[i+1]
000000001 // r0 = ’b0000_0001
100101011 // r0 = ’b0000_0001 & upp
100100100 // r4 = ps = ’b0000_0001 & upp
000000011 // r0 = 3
101001100 // r0 = ps << 3
100100100 // ps = ps << 3
000010000 // r0 = ‘b0001_0000
100101010 // r0 = low[4]
100100101 // r5 = temp = low[4]
000000010 // r0 = 2
101010101 // r0 = temp >> 2            [r5 = 0 0 0 0 0  p4 0 0]
100110100 // r0 = (temp >> 2)  | ps
100100100 // ps = (temp >> 2)  | ps    [r4 = 0 0 0 0 p8 p4 0 0]
000000111 // r0 = ‘b0000_0111
100101010 // r0 = low[2:0]
100100101 // r5 = temp = low[2:0]
000000001 // r0 = 1
101010101 // r0 = temp >> 1            [r5 = 0 0 0 0 0  0  p2 p1]
100110100 // r0 = (temp >> 1) | ps
100100100 // ps = (temp >> 1) | ps     [r4 = 0 0 0 0 p8 p4 p2 p1]
000000001 // r0 = ‘b0000_0001
100100110 // r6 = 1
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100101 // r5 = ps’ = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111101 // r0 = ps’ ^ upp[6]
100100101 // ps’ = ps’ ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp[5] >> 5
100101110 // r0 = upp[5]
100111101 // r0 = ps’ ^ upp[5]
100100101 // ps’ = ps’ ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111101 // r0 = ps’ ^ upp[4]
100100101 // ps’ = ps’ ^ upp[4]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111101 // r0 = ps’ ^ upp[3]
100100101 // ps’ = ps’ ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111101 // r0 = ps’ ^ upp[2]
100100101 // ps’ = ps’ ^ upp[2]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111101 // r0 = ps’ ^ upp[1]
100100101 // ps’ = ps’ ^ upp[1]
000000011 // r0 = 3
101001101 // r0 = ps’ << 3
100100101 // ps’ = [0 0 0 0 p8’ 0 0 0]
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100111 // r7 = temp = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111111 // r0 = temp ^ upp[6]
100100111 // temp = temp ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp >> 5
100101110 // r0 = upp[5]
100111111 // r0 = temp ^ upp[5]
100100111 // temp = temp ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111111 // r0 = temp ^ upp[4]
100100111 // temp = temp ^ upp[4]
000000111 // r0 = 7
101010010 // r0 = low >> 7
100101110 // r0 = low[7]
100111111 // r0 = temp ^ low[7]
100100111 // temp = temp ^ low[7]
000000110 // r0 = 6
101010010 // r0 = low >> 6
100101110 // r0 = low[6]
100111111 // r0 = temp ^ low[6]
100100111 // temp = temp ^ low[6]
000000101 // r0 = 5
101010010 // r0 = low >> 5
100101110 // r0 = low[5]
100111111 // r0 = temp ^ low[5]
100100111 // temp = temp ^ low[5]
000000010 // r0 = 2
101001111 // r0 = temp << 2
100110101 // r0 = (temp << 2) | ps’
100100101 // ps’ = (temp << 2) | ps’
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100111 // r7 = temp = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111111 // r0 = temp ^ upp[6]
100100111 // temp = temp ^ upp[6]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111111 // r0 = temp ^ upp[3]
100100111 // temp = temp ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111111 // r0 = temp ^ upp[2]
100100111 // temp = temp ^ upp[2]
000000111 // r0 = 7
101010010 // r0 = low >> 7
100101110 // r0 = low[7]
100111111 // r0 = temp ^ low[7]
100100111 // temp = temp ^ low[7]
000000110 // r0 = 6
101010010 // r0 = low >> 6
100101110 // r0 = low[6]
100111111 // r0 = temp ^ low[6]
100100111 // temp = temp ^ low[6]
000000011 // r0 = 3
101010010 // r0 = low >> 3
100101110 // r0 = low[3]
100111111 // r0 = temp ^ low[3]
100100111 // temp = temp ^ low[3]
000000001 // r0 = 1
101001111 // r0 = temp << 1
100110101 // r0 = (temp << 1) | ps’
100100101 // ps’ = (temp << 1) | ps’
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100111 // r7 = temp = upp[7]
000000101 // r0 = 5
101010011 // r0 = upp[5] >> 5
100101110 // r0 = upp[5]
100111111 // r0 = temp ^ upp[5]
100100111 // temp = temp ^ upp[5]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111111 // r0 = temp ^ upp[3]
100100111 // temp = temp ^ upp[3]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111111 // r0 = temp ^ upp[1]
100100111 // temp = temp ^ upp[1]
000000111 // r0 = 7
101010010 // r0 = low >> 7
100101110 // r0 = low[7]
100111111 // r0 = temp ^ low[7]
100100111 // temp = temp ^ low[7]
000000101 // r0 = 5
101010010 // r0 = low >> 5
100101110 // r0 = low[5]
100111111 // r0 = temp ^ low[5]
100100111 // temp = temp ^ low[5]
000000011 // r0 = 3
101010010 // r0 = low >> 3
100101110 // r0 = low[3]
100111111 // r0 = temp ^ low[3]
100100111 // temp = temp ^ low[3]
000000000 // r0 = 0
100000111 // r0 = temp
100110101 // r0 = temp | ps’
100100101 // ps’ = temp | ps’
100111100 // r0 = ps’ ^ ps
100100100 // r4 = s = ps’ ^ ps
000000001 // r0 = 1
101001100 // r0 = s << 1
100100100 // s = s << 1
000000000 // r0 = 0
100000010 // r0 = low
100101110 // r0 = low[0]
100100101 // temp = p0
000000111 // r0 = 7
101010011 // r0 = upp >> 7
100101110 // r0 = upp[7]
100100111 // r7 = ps’ = upp[7]
000000110 // r0 = 6
101010011 // r0 = upp >> 6
100101110 // r0 = upp[6]
100111111 // r0 = ps' ^ upp[6]
100100111 // ps' = ps' ^ upp[6]
000000101 // r0 = 5
101010011 // r0 = upp >> 5
100101110 // r0 = upp[5]
100111111 // r0 = ps' ^ upp[5]
100100111 // ps' = ps' ^ upp[5]
000000100 // r0 = 4
101010011 // r0 = upp >> 4
100101110 // r0 = upp[4]
100111111 // r0 = ps' ^ upp[4]
100100111 // ps' = ps' ^ upp[4]
000000011 // r0 = 3
101010011 // r0 = upp >> 3
100101110 // r0 = upp[3]
100111111 // r0 = ps' ^ upp[3]
100100111 // ps' = ps' ^ upp[3]
000000010 // r0 = 2
101010011 // r0 = upp >> 2
100101110 // r0 = upp[2]
100111111 // r0 = ps' ^ upp[2]
100100111 // ps' = ps' ^ upp[2]
000000001 // r0 = 1
101010011 // r0 = upp >> 1
100101110 // r0 = upp[1]
100111111 // r0 = ps' ^ upp[1]
100100111 // ps' = ps' ^ upp[1]
000000000 // r0 = 0
100000011 // r0 = upp
100101110 // r0 = upp[0]
100111111 // r0 = ps' ^ upp[0]
100100111 // ps' = ps' ^ upp[0]
000000111 // r0 = 7
101010010 // r0 = low >> 7
100101110 // r0 = low[7]
100111111 // r0 = ps' ^ low[7]
100100111 // ps' = ps' ^ low[7]
000000110 // r0 = 6
101010010 // r0 = low >> 6
100101110 // r0 = low[6]
100111111 // r0 = ps' ^ low[6]
100100111 // ps' = ps' ^ low[6]
000000101 // r0 = 5
101010010 // r0 = low >> 5
100101110 // r0 = low[5]
100111111 // r0 = ps' ^ low[5]
100100111 // ps' = ps' ^ low[5]
000000100 // r0 = 4
101010010 // r0 = low >> 4
100101110 // r0 = low[4]
100111111 // r0 = ps' ^ low[4]
100100111 // ps' = ps' ^ low[4]
000000011 // r0 = 3
101010010 // r0 = low >> 3
100101110 // r0 = low[3]
100111111 // r0 = ps' ^ low[3]
100100111 // ps' = ps' ^ low[3]
000000010 // r0 = 2
101010010 // r0 = low >> 2
100101110 // r0 = low[2]
100111111 // r0 = ps' ^ low[2]
100100111 // ps' = ps' ^ low[2]
000000001 // r0 = 1
101010010 // r0 = low >> 1
100101110 // r0 = low[1]
100111111 // r0 = ps' ^ low[1]
100100111 // ps' = ps' ^ low[1]
100111101 // r0 = p0' ^ p0
100110100 // r0 = {s, p0' ^ p0}
100100100 // r4 = {s, p0' ^ p0}
000000101 // r0 = 5
101010011 // r0 = upp >> 5
100100110 // top = upp >> 5
000000111 // r0 = 'b00000111
100101110 // r0 = top & 'b00000111
100100110 // top = top & 'b00000111
000000011 // r0 = 3
101001011 // r0 = upp << 3
100100111 // bot = upp << 3
011110000 // r0 = 'b11110000
100101111 // r0 = bot & 'b11110000
100100111 // bot = bot & 'b11110000
000000000 // r0 = 0
100000110 // r0 = top
100100011 // r3 = top
000000100 // r0 = 4
101010010 // r0 = low >> 4
100110111 // r0 = bot | (low >> 4)
100100111 // bot = bot | (low >> 4)
011111110 // r0 = 'b11111110
100101111 // r0 = bot & 'b11111110
100100111 // r7 = bot & 'b11111110
000000011 // r0 = 3
101010010 // r0 = low >> 3
100100101 // r5 = low >> 3
000000001 // r0 = 'b00000001
100101101 // r0 = (low >> 3) & 'b00000001
100110111 // r0 = ((low >> 3) & 'b00000001) | bot
100100010 // r2 = ((low >> 3) & 'b00000001) | bot
000000001 // r0 = 1
100101100 // r0 = s[0]
100100101 // r5 = s[0]
000000000 // r0 = 0
101100101 // if g == 0
110001110 // brr G0_FALSE
000000001 // r0 = 1
101010100 // r0 = s >> 1
100100101 // r5 = s >> 1
000000000 // r0 = 0
101100101 // if s == 0
110000011 // brr G0_S0_FALSE
101011000
111010001 // brl COND_DONE
010000000 // G0_S0_FALSE: r0 = 'b10000000
100110011 // r0 = top | 'b10000000
100100011 // top = top | 'b10000000
101011000
111010001 // brl COND_DONE
001000000 // G0_FALSE: r0 = 'b01000000
100110011 // r0 = top | 'b01000000
100100011 // top = top | 'b01000000
000011110 // r0 = 'b00011110
100101100 // r0 = s[4:1]
100100101 // r5 = s[4:1]
000000001 // r0 = 1
101010101 // r0 = s[4:1] >> 1
100100101 // r5 = s[4:1] >> 1
000000000 // r0 = 0
101100101 // if r5 == 0
110000011 // brr G1_S0_FALSE
101011000
111010001 // brl COND_DONE
000000001 // G1_S0_FALSE: r0 = 1
101100101 // if s == 1
110000011 // brr G1_S1_FALSE
101011000
111010001 // brl COND_DONE
000000010 // G1_S1_FALSE: r0 = 2
101100101 // if s == 2
110000011 // brr G1_S2_FALSE
101011000
111010001 // brl COND_DONE
000000011 // G1_S2_FALSE: r0 = 3
101100101 // if s == 3
110001100 // brr G1_S3_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000000001 // r0 = 'b00000001
100101110 // r0 = 'b00000001 & ~bot
100100110 // r6 = 'b00000001 & ~bot
011111110 // r0 = 'b11111110
100101010 // r0 = 'b11111110 & bot
100110110 // r0 = ('b11111110 & bot) | ('b00000001 & ~bot)
100100010 // bot[0] = ~bot[0]
101011000
111010001 // brl COND_DONE
000000100 // G1_S3_FALSE: r0 = 4
101100101 // if s == 4
110000011 // brr G1_S4_FALSE
101011000
111010001 // brl COND_DONE
000000101 // G1_S4_FALSE: r0 = 5
101100101 // if s == 5
110001100 // brr G1_S5_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000000010 // r0 = 'b00000010
100101110 // r0 = 'b00000010 & ~bot
100100110 // r6 = 'b00000010 & ~bot
011111101 // r0 = 'b11111101
100101010 // r0 = 'b11111101 & bot
100110110 // r0 = ('b11111101 & bot) | ('b00000010 & ~bot)
100100010 // bot[1] = ~bot[1]
101011000
111010001 // brl COND_DONE
000000110 // G1_S5_FALSE: r0 = 6
101100101 // if s == 6
110001100 // brr G1_S6_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000000100 // r0 = 'b00000100
100101110 // r0 = 'b00000100 & ~bot
100100110 // r6 = 'b00000100 & ~bot
011111011 // r0 = 'b11111011
100101010 // r0 = 'b11111011 & bot
100110110 // r0 = ('b11111011 & bot) | ('b00000100 & ~bot)
100100010 // bot[2] = ~bot[2]
101011000
111010001 // brl COND_DONE
000000111 // G1_S6_FALSE: r0 = 7
101100101 // if s == 7
110001100 // brr G1_S7_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000001000 // r0 = 'b00001000
100101110 // r0 = 'b00001000 & ~bot
100100110 // r6 = 'b00001000 & ~bot
011110111 // r0 = 'b11110111
100101010 // r0 = 'b11110111 & bot
100110110 // r0 = ('b11110111 & bot) | ('b00001000 & ~bot)
100100010 // bot[3] = ~bot[3]
101011000
111010001 // brl COND_DONE
000001000 // G1_S7_FALSE: r0 = 8
101100101 // if s == 8
110000011 // brr G1_S8_FALSE
101011000
111010001 // brl COND_DONE
000001001 // G1_S8_FALSE: r0 = 9
101100101 // if s == 9
110001100 // brr G1_S9_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000010000 // r0 = 'b00010000
100101110 // r0 = 'b00010000 & ~bot
100100110 // r6 = 'b00010000 & ~bot
011101111 // r0 = 'b11101111
100101010 // r0 = 'b11101111 & bot
100110110 // r0 = ('b11101111 & bot) | ('b00010000 & ~bot)
100100010 // bot[4] = ~bot[4]
101011000
111010001 // brl COND_DONE
000001010 // G1_S9_FALSE: r0 = 10
101100101 // if s == 10
110001100 // brr G1_S10_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
000100000 // r0 = 'b00100000
100101110 // r0 = 'b00100000 & ~bot
100100110 // r6 = 'b00100000 & ~bot
011011111 // r0 = 'b11011111
100101010 // r0 = 'b11011111 & bot
100110110 // r0 = ('b11011111 & bot) | ('b00100000 & ~bot)
100100010 // bot[5] = ~bot[5]
101011000
111010001 // brl COND_DONE
000001011 // G1_S10_FALSE: r0 = 11
101100101 // if s == 11
110001100 // brr G1_S11_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
001000000 // r0 = 'b01000000
100101110 // r0 = 'b01000000 & ~bot
100100110 // r6 = 'b01000000 & ~bot
010111111 // r0 = 'b10111111
100101010 // r0 = 'b10111111 & bot
100110110 // r0 = ('b10111111 & bot) | ('b01000000 & ~bot)
100100010 // bot[6] = ~bot[6]
101011000
111010001 // brl COND_DONE
000001100 // G1_S11_FALSE: r0 = 12
101100101 // if s == 12
110001100 // brr G1_S12_FALSE
101000010 // r0 = ~bot
100100110 // r6 = ~bot
010000000 // r0 = 'b10000000
100101110 // r0 = 'b10000000 & ~bot
100100110 // r6 = 'b10000000 & ~bot
001111111 // r0 = 'b01111111
100101010 // r0 = 'b01111111 & bot
100110110 // r0 = ('b01111111 & bot) | ('b10000000 & ~bot)
100100010 // bot[7] = ~bot[7]
101011000
111010001 // brl COND_DONE
000001101 // G1_S12_FALSE: r0 = 13
101100101 // if s == 13
110001100 // brr G1_S13_FALSE
101000011 // r0 = ~top
100100110 // r6 = ~top
000000001 // r0 = 'b00000001
100101110 // r0 = 'b00000001 & ~top
100100110 // r6 = 'b00000001 & ~top
011111110 // r0 = 'b11111110
100101011 // r0 = 'b11111110 & top
100110110 // r0 = ('b11111110 & top) | ('b00000001 & ~top)
100100011 // top[0] = ~top[0]
101011000
111010001 // brl COND_DONE
000001110 // G1_S13_FALSE: r0 = 14
101100101 // if s == 14
110001100 // brr G1_S14_FALSE
101000011 // r0 = ~top
100100110 // r6 = ~top
000000010 // r0 = 'b00000010
100101110 // r0 = 'b00000010 & ~top
100100110 // r6 = 'b00000010 & ~top
011111101 // r0 = 'b11111101
100101011 // r0 = 'b11111101 & top
100110110 // r0 = ('b11111101 & top) | ('b00000010 && ~top)
100100011 // top[1] = ~top[1]
101011000
111010001 // brl COND_DONE
101000011 // G1_S14_FALSE: r0 = ~top
100100110 // r6 = ~top
000000100 // r0 = 'b00000100
100101110 // r0 = 'b00000100 & ~top
100100110 // r6 = 'b00000100 & ~top
011111011 // r0 = 'b11111011
100101011 // r0 = 'b11111011 & top
100110110 // r0 = ('b11111011 & top) | ('b00000100 & ~top)
100100011 // top[2] = ~top[2]
000011110 // COND_DONE: r0 = 30
100001001 // r0 = i - 30
100100110 // r6 = i - 30
000011101 // r0 = 29
100001001 // r0 = i - 29
100100111 // r7 = i - 29
000000000 // r0 = 0
100000010 // r0 = bot
100011110 // mem[i-30] = bot
000000000 // r0 = 0
100000011 // r0 = top
100011111 // mem[i-29] = top
000000010 // r0 = 2
100000001 // r0 = i + 2
100100001 // i  = i + 2
101011000
111010010 // brl LOOP
101111111 // DONE: halt
