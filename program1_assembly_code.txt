ldi #0                         	// r0 = 0
mov $1                        	// r1 = i = 0
ldi #30                  	    // LOOP: r0 = 30
slt $1                       	// i < 30 then 1 else 0
brl 000000                      // brl DONE 
ldr $1                        	// r0 = mem[i]
mov $2                        	// r2 = low = mem[i]
ldi #1                         	// r0 = 1
add $1                         	// r0 = i + 1
ldr $0                        	// r0 = mem[i+1]
mov $3                        	// r3 = upp = mem[i+1]
ldi #5                         	// r0 = 5
lsl $3                      	// r0 = upp << 5
mov $3                        	// upp = upp << 5
ldi #3                         	// r0 = 3
lsr $2                      	// r0 = low >> 3
mov $4                        	// r4 = t_low = low >> 3
ior $3                          // r0 = t_low | upp
mov $3                        	// upp = t_low | upp
ldi #254                       	// r0 = ‘b1111_1110
and $3                         	// r0 = upp & ‘b1111_1110
mov $3                        	// upp = upp & ‘b1111_1110
ldi #1                         	// r0 = 1
mov $6                        	// r6 = 1
ldi #7                         	// r0 = 7
lsr $3                      	// r0 = upp >> 7
and $6                         	// r0 = upp[7]
mov $5                        	// r5 = p = upp[7]
ldi #6                         	// r0 = 6
lsr $3                      	// r0 = upp >> 6
and $6                         	// r0 = upp[6]
xor $5                         	// r0 = p ^ upp[6]
mov $5                        	// p = p ^ upp[6]
ldi #5                         	// r0 = 5
lsr $3                      	// r0 = upp[5] >> 5
and $6                         	// r0 = upp[5]
xor $5                         	// r0 = p ^ upp[5]
mov $5                        	// p = p ^ upp[5]
ldi #4                         	// r0 = 4
lsr $3                     	    // r0 = upp >> 4
and $6                         	// r0 = upp[4]
xor $5                         	// r0 = p ^ upp[4]
mov $5                        	// p = p ^ upp[4]
ldi #3                         	// r0 = 3
lsr $3                      	// r0 = upp >> 3
and $6                         	// r0 = upp[3]
xor $5                         	// r0 = p ^ upp[3]
mov $5                        	// p = p ^ upp[3]
ldi #2                         	// r0 = 2
lsr $3                      	// r0 = upp >> 2
and $6                         	// r0 = upp[2]
xor $5                        	// r0 = p ^ upp[2]
mov $5                        	// p = p ^ upp[2]
ldi #1                         	// r0 = 1
lsr $3                      	// r0 = upp >> 1
and $6                         	// r0 = upp[1]
xor $5                         	// r0 = p ^ upp[1]
mov $5                        	// p = p ^ upp[1]
ldi #31                        	// r0 = 31
add $1                         	// r0 = i + 31
mov $6                        	// r6 = i + 31
ldi #0                         	// r0 = 0
add $3                         	// r0 = upp
ior $5                          // r0 = upp | p
mov $3                        	// upp = upp | p
str $6                       	// mem[i+31] = upp
ldi #4                         	// r0 = 4
lsl $2                      	// r0 = low << 4
mov $4                        	// t_low = low << 4
ldi #224                       	// r0 = ‘b1110_0000
and $4                         	// r0 = t_low & ‘b1110_0000
mov $4                        	// t_low = t_low & ‘b1110_0000
ldi #1                         	// r0 = 1
mov $6                        	// r6 = 1
ldi #7                          // r0 = 7
lsr $3                          // r0 = upp >> 7
and $6                          // r0 = upp[7]
mov $5                          // r5 = p = upp[7]
ldi #6                          // r0 = 6
lsr $3                          // r0 = upp >> 6
and $6                          // r0 = upp[6]
xor $5                          // r0 = p ^ upp[6]
mov $5                          // p = p ^ upp[6]
ldi #5                          // r0 = 5
lsr $3                          // r0 = upp >> 5
and $6                          // r0 = upp[5]
xor $5                          // r0 = p ^ upp[5]
mov $5                          // p = p ^ upp[5]
ldi #4                          // r0 = 4
lsr $3                          // r0 = upp >> 4
and $6                          // r0 = upp[4]
xor $5                          // r0 = p ^ upp[4]
mov $5                          // p = p ^ upp[4]
ldi #7                          // r0 = 7
lsr $4                          // r0 = t_low >> 7
and $6                          // r0 = t_low[7]
xor $5                          // r0 = p ^ t_low[7]
mov $5                          // p = p ^ t_low[7]
ldi #6                          // r0 = 6
lsr $4                          // r0 = t_low >> 6
and $6                          // r0 = t_low[6]
xor $5                          // r0 = p ^ t_low[6]
mov $5                          // p = p ^ t_low[6]
ldi #5                          // r0 = 5
lsr $4                          // r0 = t_low >> 5
and $6                          // r0 = t_low[5]
xor $5                          // r0 = p ^ t_low[5]
mov $5                          // p = p ^ t_low[5]
ldi #4                          // r0 = 4
lsl $5                          // r0 = p << 4
ior $4                          // r0 = (p << 4) | t_low
mov $4                          // t_low = (p << 4) | t_low
ldi #1                          // r0 = ‘b0000_0001
and $2                          // r0 = low[0]
mov $5                          // p = low[0]
ldi #3                          // r0 = 3
lsl $5                          // r0 = low[0] << 3
ior $4                          // r0 = (low[0] << 3) | t_low
mov $4                          // t_low = (low[0] << 3) | t_low
ldi #1                          // r0 = 1
mov $6                          // r6 = 1
ldi #7                          // r0 = 7
lsr $3                          // r0 = upp >> 7
and $6                          // r0 = upp[7]
mov $5                          // r5 = p = upp[7]
ldi #6                          // r0 = 6
lsr $3                          // r0 = upp >> 6
and $6                          // r0 = upp[6]
xor $5                          // r0 = p ^ upp[6]
mov $5                          // p = p ^ upp[6]
ldi #3                          // r0 = 3
lsr $3                          // r0 = upp >> 3
and $6                          // r0 = upp[3]
xor $5                          // r0 = p ^ upp[3]
mov $5                          // p = p ^ upp[3]
ldi #2                          // r0 = 2
lsr $3                          // r0 = upp >> 2
and $6                          // r0 = upp[2]
xor $5                          // r0 = p ^ upp[2]
mov $5                          // p = p ^ upp[2]
ldi #3                          // r0 = 3
lsr $2                          // r0 = low >> 3
and $6                          // r0 = low[3]
xor $5                          // r0 = p ^ low[3]
mov $5                          // p = p ^ low[3]
ldi #2                          // r0 = 2
lsr $2                          // r0 = low >> 2
and $6                          // r0 = low[2]
xor $5                          // r0 = p ^ low[2]
mov $5                          // p = p ^ low[2]
ldi #0                          // r0 = 0
add $2                          // r0 = low
and $6                          // r0 = low[0]
xor $5                          // r0 = p ^ low[0]
mov $5                          // p = p ^ low[0]
ldi #2                          // r0 = 2
lsl $5                          // r0 = p << 2
ior $4                          // r0 = (p << 2) | t_low
mov $4                          // t_low = (p << 2) | t_low
ldi #1                          // r0 = 1
mov $6                          // r6 = 1
ldi #7                          // r0 = 7
lsr $3                          // r0 = upp >> 7
and $6                          // r0 = upp[7]
mov $5                          // r5 = p = upp[7]
ldi #5                          // r0 = 5
lsr $3                          // r0 = upp[5] >> 5
and $6                          // r0 = upp[5]
xor $5                          // r0 = p ^ upp[5]
mov $5                          // p = p ^ upp[5]
ldi #3                          // r0 = 3
lsr $3                          // r0 = upp >> 3
and $6                          // r0 = upp[3]
xor $5                          // r0 = p ^ upp[3]
mov $5                          // p = p ^ upp[3]
ldi #1                          // r0 = 1
lsr $3                          // r0 = upp >> 1
and $6                          // r0 = upp[1]
xor $5                          // r0 = p ^ upp[1]
mov $5                          // p = p ^ upp[1]
ldi #3                          // r0 = 3
lsr $2                          // r0 = low >> 3
and $6                          // r0 = low[3]
xor $5                          // r0 = p ^ low[3]
mov $5                          // p = p ^ low[3]
ldi #1                          // r0 = 1
lsr $2                          // r0 = low >> 1
and $6                          // r0 = low[1]
xor $5                          // r0 = p ^ low[1]
mov $5                          // p = p ^ low[1]
ldi #0                          // r0 = 0
add $2                          // r0 = low
and $6                          // r0 = low[0]
xor $5                          // r0 = p ^ low[0]
mov $5                          // p = p ^ low[0]
ldi #1                          // r0 = 1
lsl $5                          // r0 = p << 1
ior $4                          // r0 = (p << 1) | t_low
mov $4                          // t_low = (p << 1) | t_low
ldi #1                          // r0 = 1
mov $6                          // r6 = 1
ldi #7                          // r0 = 7
lsr $3                          // r0 = upp >> 7
and $6                          // r0 = upp[7]
mov $5                          // r5 = p = upp[7]
ldi #6                          // r0 = 6
lsr $3                          // r0 = upp >> 6
and $6                          // r0 = upp[6]
xor $5                          // r0 = p ^ upp[6]
mov $5                          // p = p ^ upp[6]
ldi #5                          // r0 = 5
lsr $3                          // r0 = upp[5] >> 5
and $6                          // r0 = upp[5]
xor $5                          // r0 = p ^ upp[5]
mov $5                          // p = p ^ upp[5]
ldi #4                          // r0 = 4
lsr $3                          // r0 = upp >> 4
and $6                          // r0 = upp[4]
xor $5                          // r0 = p ^ upp[4]
mov $5                          // p = p ^ upp[4]
ldi #3                          // r0 = 3
lsr $3                          // r0 = upp >> 3
and $6                          // r0 = upp[3]
xor $5                          // r0 = p ^ upp[3]
mov $5                          // p = p ^ upp[3]
ldi #2                          // r0 = 2
lsr $3                          // r0 = upp >> 2
and $6                          // r0 = upp[2]
xor $5                          // r0 = p ^ upp[2]
mov $5                          // p = p ^ upp[2]
ldi #1                          // r0 = 1
lsr $3                          // r0 = upp >> 1
and $6                          // r0 = upp[1]
xor $5                          // r0 = p ^ upp[1]
mov $5                          // p = p ^ upp[1]
ldi #0                          // r0 = 0
add $3                          // r0 = upp
and $6                          // r0 = upp[0]
xor $5                          // r0 = p ^ upp[0]
mov $5                          // p = p ^ upp[0]
ldi #7                          // r0 = 7
lsr $4                          // r0 = t_low >> 7
and $6                          // r0 = t_low[7]
xor $5                          // r0 = p ^ t_low[7]
mov $5                          // p = p ^ t_low[7]
ldi #6                          // r0 = 6
lsr $4                          // r0 = t_low >> 6
and $6                          // r0 = t_low[6]
xor $5                          // r0 = p ^ t_low[6]
mov $5                          // p = p ^ t_low[6]
ldi #5                          // r0 = 5
lsr $4                          // r0 = t_low[5] >> 5
and $6                          // r0 = t_low[5]
xor $5                          // r0 = p ^ t_low[5]
mov $5                          // p = p ^ t_low[5]
ldi #4                          // r0 = 4
lsr $4                          // r0 = t_low >> 4
and $6                          // r0 = t_low[4]
xor $5                          // r0 = p ^ t_low[4]
mov $5                          // p = p ^ t_low[4]
ldi #3                          // r0 = 3
lsr $4                          // r0 = t_low >> 3
and $6                          // r0 = t_low[3]
xor $5                          // r0 = p ^ t_low[3]
mov $5                          // p = p ^ t_low[3]
ldi #2                          // r0 = 2
lsr $4                          // r0 = t_low >> 2
and $6                          // r0 = t_low[2]
xor $5                          // r0 = p ^ t_low[2]
mov $5                          // p = p ^ t_low[2]
ldi #1                          // r0 = 1
lsr $4                          // r0 = t_low >> 1
and $6                          // r0 = t_low[1]
xor $5                          // r0 = p ^ t_low[1]
mov $5                          // p = p ^ t_low[1]
ldi #30                         // r0 = 30
add $1                          // r0 = i + 30
mov $6                          // r6 = i + 30
ldi #0                          // r0 = 0
add $5                          // r0 = p
ior $4                          // r0 = p | t_low
mov $4                          // t_low = p | t_low
str $6                          // mem[i+30] = t_low
ldi #2                          // r0 = 2
add $1                          // r0 = i + 2
mov $1                          // i = i + 2
slt $0                          // $0 < $0 then 1 else 0
brl 000001                      // brl LOOP
hlt                             // DONE: