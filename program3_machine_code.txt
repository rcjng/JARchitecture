000100000 // $0 = 32
100010000 // $0 = data_mem[$0]
100100001 // $1 = data_mem[$0]
000000011 // $0 = 3
101010001 // $0 = data_mem[32] >> 3
100100111 // $7 = $0 (pattern)
000000000 // $0 = 0
100100001 // $1 (i) = $0
000100000 // LOOP1: $0 = 32
101011001 // if $1 < $0 then 1 else 0
110110000 // brr LOOP1_DONE
000000000 // $0 = 0
100100010 // $2 (location) = 0
100100011 // $3 (count) = 0
000000100 // WHILE1: $0 = 4
101011010 // if $2 < $0 then 1 else 0
110010011 // brr WHILE1_DONE
100010001 // $0 = data_mem[$1 (i)]
100100100 // $4 = $0
000000000 // $0 = 0
100000010 // $0 = $2 (location)
101010100 // $0 = data_mem[$1 (i)] >> $2 (location)
100100100 // $4 = $0
000011111 // $0 = 31 (b’00011111)
100101100 // $0 = $0 & $4
101100111 // if ($7 == $0) {
110000100 // brr IF1_DONE
000000001 // $0 = 1
100000011 // $0 = $3 + 1 *$3 = count
100100011 // $3 = $0
000000001 // IF1_DONE: $0 = 1
100000010 // $0 = $2 + 1 *$2 = location
100100010 // $2 = $0
101011000
111100000 // brl WHILE1
000000000 // WHILE1_DONE: $0 = 0
101100011 // $0 = $3 (count) == 0
100100110 // $6 = $0
000000000 // $0 = 0
101100110 // $0 = $6 == $0 (0)
110001101 // brr IF2_DONE
000100001 // $0 = 33
100100101 // $5 = 33
100010000 // $0 = data_mem[$0]
100000011 // $0 = $0 + $3
100011101 // data_mem[$5 (33)] = $0
000000001 // $0 = 1
100100110 // $6 = 1
000100010 // $0 = 34
100100101 // $5 = 34
100010000 // $0 = data_mem[$0]
100000110 // $0 = $0 + 1
100011101 // data_mem[$5] = $0
000000001 // IF2_DONE: $0 = 1
100000001 // $0 = i + 1
100100001 // i = i + 1
101011000
111100001 // brl LOOP1
000000000 // LOOP1_DONE: $0 = 0
100100011 // $3 (count) = 0
000000000 // $0 = 0
100100001 // $1 (i) = $0
000011111 // LOOP2: $0 = 31
101011001 // if $1 < $0 then 1 else 0
110101000 // brr LOOP2_DONE
000000000 // $0 = 0
100100010 // $2 (location) = 0
100010001 // $0 = data_mem[$1 (i)]
100100100 // $4 = $0
000000100 // $0 = 4
101001100 // $0 = data_mem[$1 (i)] << 4
100100101 // $5 = $0
000000001 // $0 = 1
100000001 // $0 = $1 (i) + 1
100010000 // $0 = data_mem[$0 (i+1)]
100100100 // $4 = $0
000000100 // $0 = 4
101010100 // $0 = data_mem[(i+1)] >> 4
100101101 // $0 = $0 | $5
100100101 // $5 = $0
000000100 // WHILE2: $0 = 4
101011010 // if $2 < $0 then 1 else 0
110010001 // brr WHILE2_DONE
000000000 // $0 = 0
100000010 // $0 = $2 (location)
101010101 // $0 = $5 >> $2 (location)
100100100 // $4 = $0
000011111 // $0 = 31 (b’00011111)
100101100 // $0 = $0 & $4
101100111 // if ($7 == $0):
110000100 // brr IF3_DONE
000000001 // $0 = 1
100000011 // $0 = $3 + 1 *$3 = count
100100011 // $3 = $0
000000001 // IF3_DONE: $0 = 1
100000010 // $0 = $2 + 1 *$2 = location
100100010 // $2 = $0
101011000
111100010 // brl to address 80
000000001 // WHILE2_DONE: $0 = 1
100000001 // $0 = i + 1
100100001 // i = i + 1
101011000
111100011 // brl LOOP2
000100011 // LOOP2_DONE: $0 = 35
100100110 // $6 = 35
000100001 // $0 = 33
100010000 // $0 = data_mem[$0]
100000011 // $0 = $0 + $3 (count)
100011110 // data_mem[35] = $0
101111111 // halt
