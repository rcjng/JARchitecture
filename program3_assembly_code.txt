ldi #32                        	// r0 = 32
ldr $0                         	// r0 = mem[32]
mov $1                         	// r1 = mem[32]                            
ldi #3                         	// r0 = 3
lsr $1                       	// r0 = mem[32] >> 3
mov $7                         	// r7 = mem[32] >> 3 (pattern)
ldi #0                         	// r0 = 0
mov $1                         	// r1 = i = 0
ldi #32                        	// LOOP1: r0 = 32
slt $1                        	// if r1 < 32 then 1 else 0
brr #48				   	        // brr LOOP1_DONE
ldi #0                         	// r0 = 0
mov $2                         	// r2 = location = 0
mov $3                         	// r3 = count = 0
ldi #4                        	// WHILE1: r0 = 4
slt $2                        	// if r2 < 4 then 1 else 0
brr #19                         // brr WHILE1_DONE
ldr $1                         	// r0 = mem[i]
mov $4                         	// r4 = str = mem[i]
ldi #0                         	// r0 = 0
add $2                         	// r0 = location
lsr $4                       	// r0 = str >> location
mov $4                         	// str = str >> location
ldi #31                        	// r0 = 31 ('b00011111)
and $4                          // r0 = 'b00011111 & str
seq $7                        	// if (r7 == r0) then 1 else 0
brr #4                          // brr IF1_DONE
ldi #1                         	// r0 = 1
add $3                          // r0 = count + 1
mov $3                         	// count = count + 1
ldi #1                         	// IF1_DONE: r0 = 1
add $2                          // r0 = location + 1 
mov $2                         	// location = location + 1
slt $0
brl 100000				    	// brl WHILE1
ldi #0                         	// WHILE1_DONE: r0 = 0  
seq $3                        	// if (count == 0) then 1 else 0
mov $6                         	// r6 = if (count == 0) then 1 else 0
ldi #0                         	// r0 = 0
seq $6                        	// if (r6 == 0) then 1 else 0
brr #13  				   	    // brr IF2_DONE
ldi #33                        	// r0 = 33
mov $5                         	// r5 = 33
ldr $0                         	// r0 = mem[33]
add $3                          // r0 = mem[33] + count
str $5                        	// mem[33] = mem[33] + count
ldi #1                         	// r0 = 1
mov $6                         	// r6 = 1
ldi #34                        	// r0 = 34
mov $5                         	// r5 = 34
ldr $0                        	// r0 = mem[34]
add $6                          // r0 = mem[34] + 1
str $5                        	// mem[34] = mem[34] + 1
ldi #1                         	// IF2_DONE: r0 = 1
add $1                          // r0 = i + 1
mov $1                         	// i = i + 1     
slt $0                        	
brl 100001                      // brl LOOP1
ldi #0                         	// LOOP1_DONE: r0 = 0
mov $3                         	// count = 0
ldi #0                         	// r0 = 0
mov $1                         	// r1 = i = 0
ldi #31                        	// LOOP2: r0 = 31
slt $1                        	// if i < 31 then 1 else 0
brr #40                         // brr LOOP2_DONE
ldi #0                         	// r0 = 0
mov $2                         	// r2 = location = 0
ldr $1                         	// r0 = mem[i]
mov $4                         	// r4 = mem[i]
ldi #4                         	// r0 = 4
lsl $4                       	// r0 = mem[i] << 4
mov $5                         	// r5 = low = mem[i] << 4
ldi #1                         	// r0 = 1
add $1                          // r0 = i + 1
ldr $0                         	// r0 = mem[i+1]
mov $4                         	// r4 = mem[i+1]
ldi #4                         	// r0 = 4
lsr $4                       	// r0 = mem[i+1] >> 4
ior $5                          // r0 = (mem[i+1] >> 4) | (mem[i] << 4)
mov $5                         	// r5 = str = (mem[i+1] >> 4) | (mem[i] << 4)
ldi #4                         	// WHILE2: r0 = 4
slt $2                        	// if (location < 4) then 1 else 0
brr #17                         // brr WHILE2_DONE
ldi #0                         	// r0 = 0
add $2                          // r0 = location
lsr $5                       	// r0 = str >> location
mov $4                         	// r4 = str >> location
ldi #31                        	// r0 = 31 ('b00011111)
and $4                          // r0 = str = 'b00011111 & (str >> location)
seq $7                        	// if (pattern == str):
brr #4                          // brr IF3_DONE
ldi #1                         	// r0 = 1
add $3                          // r0 = count + 1
mov $3                         	// count = count + 1
ldi #1                         	// IF3_DONE: r0 = 1
add $2                          // r0 = location + 1
mov $2                         	// location = location + 1
slt $0                        	
brl 100010                      // brl WHILE2
ldi #1                        	// WHILE2_DONE: r0 = 1
add $1                          // r0 = i + 1
mov $1                         	// i = i + 1
slt $0                        	
brl 100011                      // brl LOOP2
ldi #35                        	// LOOP2_DONE: r0 = 35
mov $6                         	// r6 = 35
ldi #33                        	// r0 = 33
ldr $0                         	// r0 = mem[33]
add $3                          // r0 = mem[33] + count
str $6                        	// data_mem[35] = mem[33] + count
hlt                            	// halt